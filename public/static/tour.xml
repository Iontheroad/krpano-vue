<krpano version="1.19" title="Virtual Tour Peak">

	<!-- 这是引入了krpano默认的一个皮肤模板，而下面的skin_settings对此进行了一些配置，参数非常多 -->
	<include url="skin/vtourskin.xml" />

	<!-- 引入loading动画 -->
	<!-- <include url="skin/loading/loadinganimation.xml" /> -->
	<!-- 进度数字 -->
	<!-- <include url="skin/loading/loadingpercenttext.xml" /> -->
	<!-- 进度条 -->
	<!-- <include url="skin/loading/loadingbar.xml" /> -->


	<!-- customize skin settings: maps, gyro, webvr, thumbnails, tooltips, layout, design, ... -->
	<!--自定义皮肤设置:地图，陀螺仪，webvr，缩略图，工具提示，布局，设计 -->
	<skin_settings
		maps="true"
		maps_type="google"
		maps_bing_api_key=""
		maps_google_api_key=""
		maps_zoombuttons="false"
		gyro="true"
		webvr="true"
		webvr_gyro_keeplookingdirection="false"
		webvr_prev_next_hotspots="true"
		littleplanetintro="false"
		title="true"
		thumbs="true"
		thumbs_width="120"
		thumbs_height="80"
		thumbs_padding="10"
		thumbs_crop="0|40|240|160"
		thumbs_opened="false"
		thumbs_text="false"
		thumbs_dragging="true"
		thumbs_onhoverscrolling="false"
		thumbs_scrollbuttons="false"
		thumbs_scrollindicator="false"
		thumbs_loop="false"
		tooltips_buttons="false"
		tooltips_thumbs="false"
		tooltips_hotspots="false"
		tooltips_mapspots="false"
		deeplinking="false"
		loadscene_flags="MERGE"
		loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"
		loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"
		loadscene_blend_next="SLIDEBLEND(0.5,   0, 0.75, linear)"
		loadingtext=""
		layout_width="100%"
		layout_maxwidth="814"
		controlbar_width="-24"
		controlbar_height="40"
		controlbar_offset="20"
		controlbar_offset_closed="-40"
		controlbar_overlap.no-fractionalscaling="10"
		controlbar_overlap.fractionalscaling="0"
		design_skin_images="vtourskin.png"
		design_bgcolor="0x2D3E50"
		design_bgalpha="0.8"
		design_bgborder="0"
		design_bgroundedge="1"
		design_bgshadow="0 4 10 0x000000 0.3"
		design_thumbborder_bgborder="3 0xFFFFFF 1.0" design_thumbborder_padding="2"
		design_thumbborder_bgroundedge="0"
		design_text_css="color:#FFFFFF; font-family:Arial;"
		design_text_shadow="1" />



	<!--
	    For an alternative skin design either change the <skin_settings> values
	    from above or optionally include one of the predefined designs from below.
	-->
	<!-- 对于另一种皮肤设计，可以更改<skin_settings>值,从上面或可选地包括一个预定义的设计从下面 -->
	<!-- <include url="skin/vtourskin_design_flat_light.xml" /> -->
	<!-- <include url="skin/vtourskin_design_glass.xml" /> -->
	<!-- <include url="skin/vtourskin_design_ultra_light.xml" /> -->
	<!-- <include url="skin/vtourskin_design_117.xml" /> -->
	<!-- <include url="skin/vtourskin_design_117round.xml" /> -->
	<!-- <include url="skin/vtourskin_design_black.xml" /> -->


	<!-- startup action - load the first scene -->
	<!-- 表示启动时自动加载第一个场景。 -->
	<!-- autorun表自动运行，onstart代表在xml加载开始的时候运行整个action -->
	<action name="startup" autorun="onstart">
		<!-- 首先检查 startscene 是否为 null 或者对应的场景不存在。 -->
		if(startscene === null OR !scene[get(startscene)],
			<!-- 如果是，则将 startscene 的值设置为第一个场景的名称 -->
			copy(startscene,scene[0].name);
			<!-- 这样可以确保 startscene 有一个有效的场景名称。 -->
		);

		<!-- 使用 loadscene 函数加载场景。 -->
		<!-- get(startscene) 获取 startscene 的值作为要加载的场景名称 -->
		<!-- null 表示不指定初始视角，MERGE 表示将新场景的设置与当前场景进行合并。 -->
		loadscene(get(startscene), null, MERGE);
		if(startactions !==null, startactions() );
		<!-- 这里假设 startactions 是一个函数，用于执行额外的启动动作，可以根据需要进行自定义。 -->
	</action>


  <!-- 热点拖动函数 -->
	<action name="draghotspot">
	<!-- 使用 spheretoscreen 函数将场景中的球面坐标 (ath, atv) 转换为屏幕坐标，并指定热点的中心位置为 (hotspotcenterx, hotspotcentery)。通过计算 mouse.stagex 是否小于 stagewidth/2，决定使用 'l'（左侧）还是 'r'（右侧）作为屏幕位置参数。这样可以确定拖拽热点时的位置参考点。 -->
		spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery, calc(mouse.stagex LT stagewidth/2 ? 'l': 'r'));

		<!-- 计算鼠标在舞台上的位置 (mouse.stagex, mouse.stagey) 与热点中心位置 (hotspotcenterx, hotspotcentery) 的差值，得到拖拽热点时的调整量。 -->
		sub(drag_adjustx, mouse.stagex, hotspotcenterx);
		sub(drag_adjusty, mouse.stagey, hotspotcentery);

		<!-- 创建一个异步循环，当鼠标按下时才会执行循环内的操作。 -->
		asyncloop(pressed,
			<!-- 计算鼠标当前位置与热点中心位置的差值，得到拖拽的偏移量。 -->
			sub(dx, mouse.stagex, drag_adjustx);
			sub(dy, mouse.stagey, drag_adjusty);
			<!-- screentosphere 函数将屏幕坐标 (dx, dy) 转换为球面坐标 (ath, atv)，从而实现拖拽热点时的交互效果。 -->
			screentosphere(dx, dy, ath, atv);
			<!-- 在控制台或日志中打印热点的位置信息。这里假设 print_hotspot_pos() 是一个自定义函数，用于输出热点位置的相关信息，可以根据需要进行修改。 -->
			print_hotspot_pos();
		);
	</action>
	<!-- 计算拖动热点的位置 -->
	<action name="print_hotspot_pos">
			<!-- 将球面坐标 ath 和 atv 的值分别复制给 print_ath 和 print_atv。这是为了避免直接修改原始数据。 -->
			<!-- 对 print_ath 和 print_atv 进行舍入，保留三位小数。这是为了使输出的位置信息更加清晰和可读。 -->
			<!-- 使用 calc 函数将生成的 HTML 代码赋值给名为 "hotspot_pos_info" 的插件的 html 属性。生成的 HTML 代码中包含了热点的名称（name）以及舍入后的球面坐标信息（print_ath 和 print_atv）。 -->
		<![CDATA[
			copy(print_ath, ath);
			copy(print_atv, atv);
			roundval(print_ath, 3);
			roundval(print_atv, 3);
			calc(plugin[hotspot_pos_info].html,'&lt;hotspot name="' + name + '"[br]ath="' + print_ath + '"[br]atv="' + print_atv + '"[br]&gt;');
		]]>
	</action>


  <!-- 显示标题的热点 -->
	<style name="peak_hotspotstyle_tooltip" url="skin/vtourskin_mapspot.png" scale="0.5" edge="top" oy="0" distorted="false" onloaded="add_all_the_time_tooltip();" />
	<!-- 当样式加载完成后执行 add_all_the_time_tooltip 方法 -->
  <action name="add_all_the_time_tooltip">
		<!-- 使用热点的名称来构造一个新的变量"tooltipname"，它的值是以"peak_tooltip_"为前缀加上热点名称。 -->
    txtadd(tooltipname, 'peak_tooltip_', get(name));
		<!-- 调用"addplugin"函数，并将"tooltipname"作为参数，以创建一个新的插件。 -->
    addplugin(get(tooltipname));
		<!-- 将新插件的父元素设置为热点本身，以将工具提示与热点关联起来。 -->
		txtadd(plugin[get(tooltipname)].parent, 'hotspot[',get(name),']');
		<!-- 设置新插件的URL属性为"%SWFPATH%/plugins/textfield.swf"，指定了工具提示内容的显示方式为文本字段。 -->
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
		<!-- 设置新插件的对齐方式为顶部（top） -->
    set(plugin[get(tooltipname)].align,top);
		<!-- 设置新插件的边缘方式为底部（bottom） -->
		set(plugin[get(tooltipname)].edge,bottom);
		<!-- 设置新插件的X和Y坐标为0，即将工具提示显示在热点的正上方 -->
    set(plugin[get(tooltipname)].x,0);
		set(plugin[get(tooltipname)].y,0);
    <!-- 设置新插件的宽度为200像素 -->
		set(plugin[get(tooltipname)].width,200);
		<!-- 设置新插件的自动高度为true，使其根据内容自动调整高度 -->
		set(plugin[get(tooltipname)].autoheight,true);
		<!-- 设置新插件的背景为false，表示没有背景颜色或背景图像 -->
    set(plugin[get(tooltipname)].background,false);
		<!-- 设置新插件的边框为false，表示没有边框 -->
		set(plugin[get(tooltipname)].border,false);
		<!-- 设置新插件的CSS样式，包括文本的对齐方式、颜色、字体和字号等 -->
    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;');
		<!-- 设置新插件的文本阴影效果，包括阴影的偏移量、范围和角度 -->
    set(plugin[get(tooltipname)].textshadow,1); 
		set(plugin[get(tooltipname)].textshadowrange,6.0); 
		set(plugin[get(tooltipname)].textshadowangle,90);
		<!-- 将热点的工具提示内容复制到新插件的HTML属性中 -->
    copy(plugin[get(tooltipname)].html,hotspot[get(name)].tooltip);
		<!-- 禁用新插件，使工具提示一开始不可见 -->
    set(plugin[get(tooltipname)].enabled,false);
  </action>


	<!--
		do_crop_animation(framewidth, frameheight, framerate)
		- animation by changing the image cropping
		- parameters:
		  - framewidth - the width from one frame in pixels
		  - frameheight - the height from one frame in pixels
		  - framerate - the animation frame rate in 'frames per second'
		- the image can be a vertical or horizontal (or both) image-strip / sprite-sheet
		- the action will loop automatically through all frames from left to right and top to bottom
	-->
	<action name="do_crop_animation" scope="local" args="framewidth, frameheight, framerate">
		<!-- define local variables -->
		calc(local.xframes, (caller.imagewidth /framewidth) BOR 0);
		calc(local.frames, xframes * ((caller.imageheight / frameheight) BOR 0));
		def(local.frame, integer, 0);
		
		<!-- set the first frame -->
		calc(caller.crop, '0|0|' + framewidth + '|' + frameheight);
		
		<!-- do the animation -->
		setinterval(calc('crop_anim_' + caller.name), calc(1.0 / framerate),
			if(caller.loaded,
				inc(frame);
				if(frame GE frames, if(caller.onlastframe !== null, callwith(caller, onlastframe() ) ); set(frame,0); );
				mod(xpos, frame, xframes);
				div(ypos, frame, xframes);
				Math.floor(ypos);
				mul(xpos, framewidth);
				mul(ypos, frameheight);
				calc(caller.crop, xpos + '|' + ypos + '|' + framewidth + '|' + frameheight);
			  ,
				<!-- stop the interval when the hotspot gets removed -->
				clearinterval(calc('crop_anim_' + caller.name));
			);
		);
	</action>


	<!-- 场景 -->
	<!-- 存储场景代码块，被 loadscene 的场景代码块将被解析 -->
	<scene name="scene_10017" title="篮球场"
		onstart="defaultsnow();"
		thumburl="panos/10017.tiles/thumb.jpg"
		lat="34.71274167" lng="113.51524722" heading="268.1">


		<!-- 视野设置 -->
		<view hlookat="268.1" vlookat="0.0" fovtype="MFOV" fov="120" maxpixelzoom="2.0" fovmin="70"
			fovmax="140" limitview="auto" />

		<!-- 预览图设置 -->
		<!--  preview就是进入场景的时候需要先展示那个图片,preview.jpg是自动生成的 -->
		<preview url="panos/10017.tiles/preview.jpg" />

		<!-- // image就是加载所有的场景图,至于里面的Cube是什么可以在文档中搜索查看 -->
		<!-- 全景图设置 -->
		<image prealign="0|268.1|0">
			<cube url="panos/10017.tiles/pano_%s.jpg" />
		</image>

		<!-- 设置热点 -->
		<hotspot
			name="spot1546933175342"
			ath="-79.03260129263748"
			atv="11.32974335214361"
			linkedscene="scene_10034"
			style="skin_hotspotstyle"
			dive="true"
		/>


		<!-- 一直显示标题的热点 -->
 		<hotspot name="spot3" style="peak_hotspotstyle_tooltip" ath="-30.441" atv="14.181" tooltip="tooltip 1"/>
		<hotspot name="spot4" style="peak_hotspotstyle_tooltip" ath="-48.224" atv="12.630" tooltip="tooltip 2"/> 

		<!-- 动画热点 -->
		<hotspot name="spot5" url="target.png" onloaded="do_crop_animation(128,128, 60);" ath="+15" atv="-12" onclick="looktohotspot(get(name),65);" scale="0.40" zoom="true" />



		<!-- <hotspot text="我是一个自定义的marker"
			name="area2" ath="-270" atv="50.471"
			url="skin/vtourskin_mapspot.png"
			style="skin_tooltips"
		/> -->


		<hotspot name="hotspot1" ath="-370" atv="50.471">
			<tooltip>This is a hotspot</tooltip>
			<style name="icon" url="skin/vtourskin_mapspot.png" />
		</hotspot>


		<plugin name="hotspot_pos_info"
			type="text"
			html="drag the hotspots..."
			css="font-family:Courier;font-size: 16px;"
			padding="8"
			align="lefttop" x="10" y="10"
			width="300"
			height="100"
			enabled="true"
		/>

	</scene>

	<scene name="scene_10034"
		title="10034" onstart="" thumburl="panos/10034.tiles/thumb.jpg"
		lat="34.71205833" lng="113.51638611" heading="294.2">

		<view hlookat="294.2" vlookat="0.0" fovtype="MFOV" fov="120" maxpixelzoom="2.0" fovmin="70"
			fovmax="140" limitview="auto" />

		<preview url="panos/10034.tiles/preview.jpg" />

		<image prealign="0|294.2|0">
			<cube url="panos/10034.tiles/pano_%s.jpg" />
		</image>

	</scene>


</krpano>