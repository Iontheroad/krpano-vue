<krpano>
  <!-- 热点拖动函数 -->
	<action name="draghotspot">
	<!-- 使用 spheretoscreen 函数将场景中的球面坐标 (ath, atv) 转换为屏幕坐标，并指定热点的中心位置为 (hotspotcenterx, hotspotcentery)。通过计算 mouse.stagex 是否小于 stagewidth/2，决定使用 'l'（左侧）还是 'r'（右侧）作为屏幕位置参数。这样可以确定拖拽热点时的位置参考点。 -->
		spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery, calc(mouse.stagex LT stagewidth/2 ? 'l': 'r'));

		<!-- 计算鼠标在舞台上的位置 (mouse.stagex, mouse.stagey) 与热点中心位置 (hotspotcenterx, hotspotcentery) 的差值，得到拖拽热点时的调整量。 -->
		sub(drag_adjustx, mouse.stagex, hotspotcenterx);
		sub(drag_adjusty, mouse.stagey, hotspotcentery);

		<!-- 创建一个异步循环，当鼠标按下时才会执行循环内的操作。 -->
		asyncloop(pressed,
			<!-- 计算鼠标当前位置与热点中心位置的差值，得到拖拽的偏移量。 -->
			sub(dx, mouse.stagex, drag_adjustx);
			sub(dy, mouse.stagey, drag_adjusty);
			<!-- screentosphere 函数将屏幕坐标 (dx, dy) 转换为球面坐标 (ath, atv)，从而实现拖拽热点时的交互效果。 -->
			screentosphere(dx, dy, ath, atv);
			<!-- 在控制台或日志中打印热点的位置信息。这里假设 print_hotspot_pos() 是一个自定义函数，用于输出热点位置的相关信息，可以根据需要进行修改。 -->
			print_hotspot_pos();
		);
	</action>
	<!-- 计算拖动热点的位置 -->
	<action name="print_hotspot_pos">
			<!-- 将球面坐标 ath 和 atv 的值分别复制给 print_ath 和 print_atv。这是为了避免直接修改原始数据。 -->
			<!-- 对 print_ath 和 print_atv 进行舍入，保留三位小数。这是为了使输出的位置信息更加清晰和可读。 -->
			<!-- 使用 calc 函数将生成的 HTML 代码赋值给名为 "hotspot_pos_info" 的插件的 html 属性。生成的 HTML 代码中包含了热点的名称（name）以及舍入后的球面坐标信息（print_ath 和 print_atv）。 -->
		<![CDATA[
			copy(print_ath, ath);
			copy(print_atv, atv);
			roundval(print_ath, 3);
			roundval(print_atv, 3);
			calc(plugin[hotspot_pos_info].html,'&lt;hotspot name="' + name + '"[br]ath="' + print_ath + '"[br]atv="' + print_atv + '"[br]&gt;');
		]]>
	</action>


  <!-- line热点+显示标题 peak_type=1 -->
	<style
		name="peak_hotspotstyle_tooltip"
		url="skin/hotspot/line.png"
		scale="0.5"
		edge="center"
		oy="-20"
		distorted="false"
		onloaded="add_hotspot_tooltip();"
	/>
	<!-- line热点+显示标题和头像 peak_type=2 -->
	<style
		name="peak_hotspotstyle_tooltip_head"
		url="skin/hotspot/line.png"
		scale="0.5"
		edge="center"
		oy="-20"
		distorted="false"
		onloaded="add_hotspot_tooltip();add_hotspot_head();"
	/>

	<!-- portal动画跳转热点+显示标题 peak_type=3 -->
	<style
		name="peak_hotspotstyle_animation_tooltip"
		url="skin/hotspot/portal.png"
		scale="0.5"
		edge="center"
		oy="-20"
		distorted="false"
		normal="false" 
		onloaded="do_crop_animation(100,100,15);add_hotspot_tooltip();"
	/>

	<!-- 当样式加载完成后执行 add_hotspot_tooltip 方法 -->
	<!-- 		添加热点的tooltip (plugin) -->
  <action name="add_hotspot_tooltip">
		<!-- 使用热点的名称来构造一个新的变量"tooltipname"，它的值是以"peak_hotspot_tooltip_"为前缀加上热点名称。 -->
    txtadd(tooltipname, 'peak_hotspot_tooltip_', get(name));
		<!-- 调用"addplugin"函数，并将"tooltipname"作为参数，以创建一个新的插件。 -->
    addplugin(get(tooltipname));
		<!-- 将新插件的父元素设置为热点本身，以将工具提示与热点关联起来。 -->
		txtadd(layer[get(tooltipname)].parent,'hotspot[',get(name),']');
		<!-- txtadd(layer[get(tooltipname)].parent, 'hotspot[',get(name),']'); -->
		<!-- 设置新插件的URL属性为"%SWFPATH%/plugins/textfield.swf"，指定了工具提示内容的显示方式为文本字段。 -->
    set(layer[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');


    <!-- set(layer[get(tooltipname)].type,'text'); -->

		<!-- 设置新插件的X和Y坐标为0，即将工具提示显示在热点的正上方 -->
    set(layer[get(tooltipname)].x,0);
		set(layer[get(tooltipname)].y,0);
    <!-- 设置新插件的宽度为200像素 -->
		<!-- set(layer[get(tooltipname)].width,200); -->
		set(layer[get(tooltipname)].autowidth,true);
		<!-- 设置新插件的自动高度为true，使其根据内容自动调整高度 -->
		set(layer[get(tooltipname)].autoheight,true);
		<!-- 设置新插件的背景为false，表示没有背景颜色或背景图像 -->
    set(layer[get(tooltipname)].background,false);
		<!-- 设置新插件的边框为false，表示没有边框 -->
		set(layer[get(tooltipname)].border,false);
		<!-- text == '' OR text === null, -->
		if(hotspot[get(name)].peak_head,
			set(layer[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial;  font-size:12px;background-color:rgba(0,0,0,.6);padding:5px 8px 5px 28px;border-radius:17px;  transform:translate(0px,-28px)');,set(layer[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial;font-size:12px;background-color:rgba(0,0,0,.6);padding:5px 8px;border-radius:8px;cursor:pointer;');
			set(layer[get(tooltipname)].align,top);
			set(layer[get(tooltipname)].edge,bottom);
		);

		<!-- 设置新插件的文本阴影效果，包括阴影的偏移量、范围和角度 -->
    <!-- set(layer[get(tooltipname)].textshadow,1);
		set(layer[get(tooltipname)].textshadowrange,6.0);
		set(layer[get(tooltipname)].textshadowangle,90); -->
    copy(layer[get(tooltipname)].html,hotspot[get(name)].peak_tooltip);
    set(layer[get(tooltipname)].capture,false);
    set(layer[get(tooltipname)].enabled,true);
  </action>


	<!-- 添加热点的头像 -->
  <action name="add_hotspot_head" >
		<!-- 使用热点的名称来构造一个新的变量"tooltipname"，它的值是以"peak_hotspot_head_"为前缀加上热点名称。 -->
    txtadd(tooltipname, 'peak_hotspot_head_', get(name));
    addplugin(get(tooltipname));
		<!-- 将新插件的父元素设置为热点本身，以将工具提示与热点关联起来。 -->
		txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name),']');
		<!-- 设置新插件的URL属性为"%SWFPATH%/plugins/textfield.swf"，指定了工具提示内容的显示方式为文本字段。 -->
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
		<!-- 设置新插件的对齐方式为顶部（top） -->
    set(plugin[get(tooltipname)].align,top);
		<!-- 设置新插件的边缘方式为底部（bottom） -->
		set(plugin[get(tooltipname)].edge,bottom);
    set(plugin[get(tooltipname)].x,0);
		set(plugin[get(tooltipname)].y,2);
		set(plugin[get(tooltipname)].autowidth,true);
		set(plugin[get(tooltipname)].autoheight,true);
		<!-- 设置新插件的背景为false，表示没有背景颜色或背景图像 -->
    set(plugin[get(tooltipname)].background,false);
		<!-- 设置新插件的边框为false，表示没有边框 -->
		set(plugin[get(tooltipname)].border,false);
		<!-- set(plugin[get(tooltipname)].cssclass,'round-image'); -->

		set(bgurl, get(hotspot[ get(name)].peak_head));
		<!-- 设置改插件的内容,也就是图片 -->
    <!-- set(plugin[get(tooltipname)].url, get(bgurl)); -->
		txtadd(mycss,'width:32px;height:32px;background-color:#ffffff;border-radius:50%;background-image:url(', get(bgurl) ,');background-size:100% 100%;margin:0px;cursor:default;');
    set(plugin[get(tooltipname)].css, get(mycss));

		set(layer[get(tooltipname)].capture,false);
    set(layer[get(tooltipname)].enabled,true);

  </action>

	<!-- 创建一个新的热点作为其他热点的tooltip-->
	<action name="add_hotspot_tooltip_vr">
    txtadd(tooltipname, 'tooltip_', get(name));
    addhotspot(get(tooltipname));
		<!-- js(console.log(get(hotspot[get(tooltipname)].parent))); -->
    set(hotspot[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    <!-- set(hotspot[get(tooltipname)].type,'text'); -->

		<!-- 这一行设置热点的对齐方式为顶部对齐 -->
    set(hotspot[get(tooltipname)].align,top);
		<!-- 这一行设置热点的边缘位置为底部 -->
    set(hotspot[get(tooltipname)].edge,bottom);
    <!-- set(hotspot[get(tooltipname)].renderer,'css3d'); -->

		<!-- 这一行检查设备是否是移动设备，如果是，则设置热点的缩放比例为0.5。 -->
    if(device.mobile,
    	set(hotspot[get(tooltipname)].scale,0.5);
    );

    set(hotspot[get(tooltipname)].atv,get(hotspot[get(name)].atv));
    set(hotspot[get(tooltipname)].ath,get(hotspot[get(name)].ath));

		<!-- 这一行设置热点的宽度自适应 -->
    set(hotspot[get(tooltipname)].autowidth,true);
    set(hotspot[get(tooltipname)].autoheight,true);
		<!-- 这一行设置热点在垂直方向上居中 -->
    set(hotspot[get(tooltipname)].vcenter,true);
		<!-- 这一行设置热点的背景可见 -->
    set(hotspot[get(tooltipname)].background,true);
		<!-- 这一行设置热点背景的边缘大小为10 -->
    set(hotspot[get(tooltipname)].bgroundedge,10);
    set(hotspot[get(tooltipname)].color,"#ffffff");
		<!-- 这一行设置热点背景的颜色为十六进制值0xccc -->
    set(hotspot[get(tooltipname)].backgroundcolor,"#000000");
		<!-- 这一行设置热点背景的边缘为圆角，圆角半径为5 -->
    <!-- set(hotspot[get(tooltipname)].roundedge,17); -->
		<!-- 这一行设置热点背景的透明度为1 -->
    set(hotspot[get(tooltipname)].backgroundalpha,".6");
		<!-- 这一行设置热点内容与背景之间的边距为5 -->
    <!-- set(hotspot[get(tooltipname)].padding,4); -->
		<!-- 这一行设置热点没有边框 -->
    <!-- set(hotspot[get(tooltipname)].border,false); -->
		<!-- 这一行设置热点没有发光效果 -->
    <!-- set(hotspot[get(tooltipname)].glow,0); -->
		<!-- 这一行设置热点的层级顺序为99999，使其位于其他元素之上 -->
    <!-- set(hotspot[get(tooltipname)].zorder,99999); -->
		<!-- 这一行设置热点发光效果的颜色为白色 -->
    <!-- set(hotspot[get(tooltipname)].glowcolor,0xFFFFFF); -->
    <!-- set(hotspot[get(tooltipname)].distorted,false); -->
    set(hotspot[get(tooltipname)].normal,false);
    set(hotspot[get(tooltipname)].visible,true);
		
    <!-- set(hotspot[get(tooltipname)].linkedscene,get(linkedscene)); -->
    set(hotspot[get(tooltipname)].peak_tooltip,get(peak_tooltip));

		set(js_hotspot_name,get(name));
		set(js_peak_to_scene,get(peak_to_scene));
		set(js_blend,get(blend));

		<!-- 设置点击事件调用 js里的点击热点的事件 clickHotspot -->
    set(hotspot[get(tooltipname)].onclick,call_js_clickhotspot(get(js_hotspot_name)));

    <!-- set(hotspot[get(tooltipname)].onclick,peak_click_to_scene(get(js_peak_to_scene), get(js_blend) ,get(js_hotspot_name))); -->

    if(device.mobile,
    	set(hotspot[get(tooltipname)].css,'text-align:center; color:#FFFFFF;font-size:12px;');,
    	set(hotspot[get(tooltipname)].css,'text-align:center;margin:0px; color:#FFFFFF;font-size:12px;padding:5px 8px 5px 8px;border-radius:8px;background-color:rgba(0,0,0,.6)');
    );

    <!-- set(hotspot[get(tooltipname)].textshadow,0); -->
    <!-- set(hotspot[get(tooltipname)].textshadowrange,6.0); -->
    <!-- set(hotspot[get(tooltipname)].textshadowangle,90); -->

		<!-- 这一行检查变量'text'是否为空或null。如果是，则将热点的HTML内容设置为与名为'linkscene'的场景标题相同，否则设置为变量'text'的值 -->
    if(peak_tooltip == '' OR peak_tooltip === null,
			copy(hotspot[get(tooltipname)].html,scene[get(linkscene)].title),
			copy(hotspot[get(tooltipname)].html,peak_tooltip)
    );

		set(hotspot[get(tooltipname)].capture,false);
    set(hotspot[get(tooltipname)].enabled,true);
		set(hotspot[get(tooltipname)].oy,-48)
		
		<!-- device.mobile -->
  </action>



	<!--
		do_crop_animation(framewidth, frameheight, framerate)
		Do_crop_animation(帧宽，帧高，帧率)
		- animation by changing the image cropping 动画通过改变图像裁剪
		- parameters:
		  - framewidth - 从一帧开始的宽度，以像素为单位
		  - frameheight - 从一帧开始的高度，以像素为单位
		  - framerate - 动画帧率以“帧/秒”为单位
		- 图像可以是垂直或水平(或两者兼而有之)图像条/精灵表
		- 动作将从左到右、从上到下自动循环遍历所有帧
	-->
	<!-- 动画热点 -->
	<action name="do_crop_animation" scope="local" args="framewidth, frameheight, framerate">
		<!-- define local variables -->
		<!-- 定义局部变量 -->
		calc(local.xframes, (caller.imagewidth /framewidth) BOR 0);
		calc(local.frames, xframes * ((caller.imageheight / frameheight) BOR 0));
		def(local.frame, integer, 0);

		<!-- set the first frame -->
		calc(caller.crop, '0|0|' + framewidth + '|' + frameheight);

		<!-- do the animation -->
		setinterval(calc('crop_anim_' + caller.name), calc(1.0 / framerate),
			if(caller.loaded,
				inc(frame);
				if(frame GE frames, if(caller.onlastframe !== null, callwith(caller, onlastframe() ) ); set(frame,0); );
				mod(xpos, frame, xframes);
				div(ypos, frame, xframes);
				Math.floor(ypos);
				mul(xpos, framewidth);
				mul(ypos, frameheight);
				calc(caller.crop, xpos + '|' + ypos + '|' + framewidth + '|' + frameheight);
			  ,
				<!-- stop the interval when the hotspot gets removed -->
				clearinterval(calc('crop_anim_' + caller.name));
			);
		);
	</action>



	<action name="qweqwe_aa"  >
		js(myGetXML(%1));
	</action>
	<action name="qweqwe_bb" scope="local" args="myb">
		js(console.log("接收到了",get(myb)))
	</action>

	<!-- 点击热点的 -->
	<action name="call_js_clickhotspot" scope="local"  args="js_hotspot_name">
		js(clickHotspot_xml(get(js_hotspot_name)));
	</action>


	<!-- 切换场景 -->
	<action name="peak_click_to_scene" scope="local" args="peak_to_sceneName, blend, hotspot_name">
		<!-- peak_to_sceneName : 跳转的场景名 -->
		<!-- blend : 跳转动画 -->
		<!-- hotspot_name : 点击热点名 -->

		<!-- 点击场景图跳转,不会传递热点名 -->
		if(get(hotspot_name) != '' OR get(hotspot_name) != null,
			looktohotspot(get(hotspot_name), 65);
			,
		);
		loadscene(get(peak_to_sceneName), null, MERGE, get(blend));
	</action>

	
	<action name="peak_enterVR">
		webvr.enterVR();
		<!-- delayedcall(1.0,webvr.enterVR()); -->
		<!-- js(console.log(get(scene[get(xml.scene).name]))); -->
		<!-- for(set(i,0), i LT hotspot.count, inc(i),
				if(hotspot[get(i)].normal == 'false',
					set(hotspot[get(i)].visible,true);,
					set(hotspot[get(i)].visible,false);,
				);
		); -->
	</action>

	<action name="peak_exitVR">
		<!-- for(set(i,0),i LT hotspot.count, inc(i),
			if(hotspot[get(i)].normal == 'false',
				set(hotspot[get(i)].visible, true);,
				set(hotspot[get(i)].visible, false);,
			);
		); -->
	</action>


	<!-- 自动旋转 -->
	<autorotate
		enabled="false"
		waittime="1.5"
		accel="1.0"
		speed="10.0"
		horizon="0.0"
		tofov="off"
		zoomslowdown="true"
		interruptionevents="userviewchange|layers|keyboard"
  />


	<!-- 加载声音插件 -->
	<plugin
		name="soundinterface"
		url.flash="/vtour/plugins/soundinterface.swf"
		url.html5="/vtour/plugins/soundinterface.js"
		rootpath=""
		preload="true"
		keep="true"
	/>

  <!-- <action name="jsaaaa" autorun="onstart" type="Javascript"><![CDATA[
    let a=123
    console.log(a)
  ]]></action> -->

	<!-- 音频事件  -->
	<action name="peak_audio">
		if(%1,
			playsound(bgsnd, 'https://krpano.com/panos/xmas/ding_dong_merrily_on_high.mp3|https://krpano.com/panos/xmas/ding_dong_merrily_on_high.ogg', 0);,pausesound(bgsnd);
		)
		
	</action>

</krpano>